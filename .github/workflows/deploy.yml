name: CI/CD:Build ‚Üí Test ‚Üí Dockerize ‚Üí Push ‚Üí Deploy

on:
  push:
    branches:
      - main

env:
  RESOURCE_GROUP: rajveer
  CONTAINERAPP_NAME: rajveer
  IMAGE_NAME: rajveerapp
  ACR_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout code
    - name: ‚¨áÔ∏è Checkout Code
      uses: actions/checkout@v3

    # 2. Build stage (e.g. install Python deps)
    - name: üèóÔ∏è Build Code
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    # 3. Run tests
    - name: ‚úÖ Run Unit Tests
      run: pytest

    # 4. Generate image tag
    - name: üè∑Ô∏è Generate Docker Image Tag
      run: |
        IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "FULL_IMAGE=${{ env.ACR_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG" >> $GITHUB_ENV

    # 5. Login to Azure
    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # 6. Login to ACR
    - name: üîê Docker Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
        password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

    # 7. Build Docker image
    - name: üê≥ Build Docker Image
      run: |
        docker build -t ${{ env.FULL_IMAGE }} .

    # 8. Push image to ACR
    - name: üì§ Push Image to ACR
      run: |
        docker push ${{ env.FULL_IMAGE }}

    # 9. Check if Container App exists
    - name: üîé Check Container App Exists
      id: checkapp
      run: |
        if az containerapp show --name ${{ env.CONTAINERAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi

    # 10. Create Container App (if first time)
    - name: üÜï Create Container App
      if: env.exists == 'false'
      run: |
        az containerapp env create \
          --name rajveer-env \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --location centralindia

        az containerapp create \
          --name ${{ env.CONTAINERAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --environment rajveer-env \
          --image ${{ env.FULL_IMAGE }} \
          --target-port 80 \
          --ingress external \
          --registry-server ${{ env.ACR_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }}

    # 11. Update app with new image
    - name: üöÄ Deploy Updated Image
      if: env.exists == 'true'
      run: |
        az containerapp update \
          --name ${{ env.CONTAINERAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.FULL_IMAGE }}

    # 12. Show app URL
    - name: üåê Show Deployed URL
      run: |
        URL=$(az containerapp show \
          --name ${{ env.CONTAINERAPP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query properties.configuration.ingress.fqdn \
          -o tsv)
        echo "üåç App running at: https://$URL"
