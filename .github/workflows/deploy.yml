name: CI/CD: Build ‚Üí Test ‚Üí Dockerize ‚Üí Push ‚Üí Deploy

on:
  push:
    branches:
      - main

env:
  RESOURCE_GROUP: rajveer
  CONTAINERAPP_NAME: rajveer
  IMAGE_NAME: rajveerapp

jobs:
  build-test:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
    steps:
      - name: üß± Checkout Code
        uses: actions/checkout@v3

      - name: üèóÔ∏è Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üì¶ Install dependencies
        run: |
          pip install -r requirements.txt || true
          pip install pytest || true

      - name: ‚úÖ Run Unit Tests
        run: |
          pytest tests || echo "‚ö†Ô∏è No tests found, skipping."

      - name: üè∑Ô∏è Generate Docker Image Tag
        id: set_tag
        run: |
          TAG=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "image_tag=$TAG" >> $GITHUB_OUTPUT

  docker-build:
    needs: build-test
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-test.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîê Docker Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: üê≥ Build Docker Image
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "‚úÖ Building image: $IMAGE"
          docker build -t $IMAGE .

  push-acr:
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-test.outputs.image_tag }}
    steps:
      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîê Docker Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}

      - name: üì§ Push Docker Image to ACR
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "üì§ Pushing: $IMAGE"
          docker push $IMAGE

  deploy:
    needs: push-acr
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-test.outputs.image_tag }}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üîé Check if Container App Exists
        id: check
        run: |
          if az containerapp show --name ${{ env.CONTAINERAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: üÜï Create Container App
        if: env.exists == 'false'
        run: |
          az containerapp env create \
            --name rajveer-env \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --location centralindia

          az containerapp create \
            --name ${{ env.CONTAINERAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --environment rajveer-env \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --target-port 80 \
            --ingress external \
            --registry-server ${{ secrets.ACR_LOGIN_SERVER }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }}

      - name: üöÄ Update Container App
        if: env.exists == 'true'
        run: |
          az containerapp update \
            --name ${{ env.CONTAINERAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: üåê Show App URL
        run: |
          URL=$(az containerapp show \
            --name ${{ env.CONTAINERAPP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            -o tsv)
          echo "‚úÖ App deployed at: https://$URL"
